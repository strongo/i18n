// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/strongo/i18n (interfaces: SingleLocaleTranslator)
//
// Generated by this command:
//
//	mockgen github.com/strongo/i18n SingleLocaleTranslator
//

// Package mock_i18n is a generated GoMock package.
package mock_i18n

import (
	reflect "reflect"

	i18n "github.com/strongo/i18n"
	gomock "go.uber.org/mock/gomock"
)

// MockSingleLocaleTranslator is a mock of SingleLocaleTranslator interface.
type MockSingleLocaleTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockSingleLocaleTranslatorMockRecorder
	isgomock struct{}
}

// MockSingleLocaleTranslatorMockRecorder is the mock recorder for MockSingleLocaleTranslator.
type MockSingleLocaleTranslatorMockRecorder struct {
	mock *MockSingleLocaleTranslator
}

// NewMockSingleLocaleTranslator creates a new mock instance.
func NewMockSingleLocaleTranslator(ctrl *gomock.Controller) *MockSingleLocaleTranslator {
	mock := &MockSingleLocaleTranslator{ctrl: ctrl}
	mock.recorder = &MockSingleLocaleTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleLocaleTranslator) EXPECT() *MockSingleLocaleTranslatorMockRecorder {
	return m.recorder
}

// Locale mocks base method.
func (m *MockSingleLocaleTranslator) Locale() i18n.Locale {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locale")
	ret0, _ := ret[0].(i18n.Locale)
	return ret0
}

// Locale indicates an expected call of Locale.
func (mr *MockSingleLocaleTranslatorMockRecorder) Locale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locale", reflect.TypeOf((*MockSingleLocaleTranslator)(nil).Locale))
}

// Translate mocks base method.
func (m *MockSingleLocaleTranslator) Translate(key string, args ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Translate", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Translate indicates an expected call of Translate.
func (mr *MockSingleLocaleTranslatorMockRecorder) Translate(key any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockSingleLocaleTranslator)(nil).Translate), varargs...)
}

// TranslateNoWarning mocks base method.
func (m *MockSingleLocaleTranslator) TranslateNoWarning(key string, args ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TranslateNoWarning", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// TranslateNoWarning indicates an expected call of TranslateNoWarning.
func (mr *MockSingleLocaleTranslatorMockRecorder) TranslateNoWarning(key any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateNoWarning", reflect.TypeOf((*MockSingleLocaleTranslator)(nil).TranslateNoWarning), varargs...)
}

// TranslateWithMap mocks base method.
func (m *MockSingleLocaleTranslator) TranslateWithMap(key string, args map[string]string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateWithMap", key, args)
	ret0, _ := ret[0].(string)
	return ret0
}

// TranslateWithMap indicates an expected call of TranslateWithMap.
func (mr *MockSingleLocaleTranslatorMockRecorder) TranslateWithMap(key, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateWithMap", reflect.TypeOf((*MockSingleLocaleTranslator)(nil).TranslateWithMap), key, args)
}
