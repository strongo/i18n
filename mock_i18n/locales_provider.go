// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/strongo/i18n (interfaces: LocalesProvider)
//
// Generated by this command:
//
//	mockgen github.com/strongo/i18n LocalesProvider
//

// Package mock_i18n is a generated GoMock package.
package mock_i18n

import (
	reflect "reflect"

	i18n "github.com/strongo/i18n"
	gomock "go.uber.org/mock/gomock"
)

// MockLocalesProvider is a mock of LocalesProvider interface.
type MockLocalesProvider struct {
	ctrl     *gomock.Controller
	recorder *MockLocalesProviderMockRecorder
	isgomock struct{}
}

// MockLocalesProviderMockRecorder is the mock recorder for MockLocalesProvider.
type MockLocalesProviderMockRecorder struct {
	mock *MockLocalesProvider
}

// NewMockLocalesProvider creates a new mock instance.
func NewMockLocalesProvider(ctrl *gomock.Controller) *MockLocalesProvider {
	mock := &MockLocalesProvider{ctrl: ctrl}
	mock.recorder = &MockLocalesProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalesProvider) EXPECT() *MockLocalesProviderMockRecorder {
	return m.recorder
}

// GetLocaleByCode5 mocks base method.
func (m *MockLocalesProvider) GetLocaleByCode5(code5 string) (i18n.Locale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocaleByCode5", code5)
	ret0, _ := ret[0].(i18n.Locale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocaleByCode5 indicates an expected call of GetLocaleByCode5.
func (mr *MockLocalesProviderMockRecorder) GetLocaleByCode5(code5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocaleByCode5", reflect.TypeOf((*MockLocalesProvider)(nil).GetLocaleByCode5), code5)
}

// SupportedLocales mocks base method.
func (m *MockLocalesProvider) SupportedLocales() []i18n.Locale {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedLocales")
	ret0, _ := ret[0].([]i18n.Locale)
	return ret0
}

// SupportedLocales indicates an expected call of SupportedLocales.
func (mr *MockLocalesProviderMockRecorder) SupportedLocales() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedLocales", reflect.TypeOf((*MockLocalesProvider)(nil).SupportedLocales))
}
